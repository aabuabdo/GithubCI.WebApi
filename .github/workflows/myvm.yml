name: Build and Deploy .NET App to IIS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:

      # 1️⃣ Checkout الكود من GitHub
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ تثبيت .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3️⃣ Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # 4️⃣ Build project
      - name: Build project
        run: dotnet build --configuration Release --no-restore

      # 5️⃣ Run unit tests
      - name: Run tests
        run: dotnet test --no-build --verbosity normal

      # 6️⃣ Publish application
      - name: Publish application
        run: dotnet publish -c Release -o ./publish

      # 7️⃣ Deploy to IIS (مُصحح ✅)
      - name: Deploy to IIS
        shell: powershell
        run: |
          Import-Module WebAdministration

          $siteName = "MyApp"
          $physicalPath = "C:\inetpub\wwwroot\MyApp"
          $appPoolName = "MyAppPool"

          Write-Host "🚀 بدء النشر لـ $siteName" -ForegroundColor Green

          # إنشاء المجلد إذا لم يكن موجود
          if (-not (Test-Path $physicalPath)) {
              New-Item -Path $physicalPath -ItemType Directory -Force
              Write-Host "📁 تم إنشاء المجلد: $physicalPath" -ForegroundColor Yellow
          }

          # إنشاء App Pool إذا لم يكن موجود
          if (-not (Test-Path "IIS:\AppPools\$appPoolName")) {
              New-Item IIS:\AppPools\$appPoolName
              Write-Host "🐳 تم إنشاء App Pool: $appPoolName" -ForegroundColor Yellow
          }

          # إنشاء الموقع إذا لم يكن موجود
          if (-not (Get-ChildItem IIS:\Sites | Where-Object { $_.Name -eq $siteName })) {
              New-Item -Path "IIS:\Sites\$siteName" -physicalPath $physicalPath -bindings @{protocol="http";bindingInformation="*:8080:"}
              Set-ItemProperty "IIS:\Sites\$siteName" -Name applicationPool -Value $appPoolName
              Write-Host "🌐 تم إنشاء الموقع: $siteName" -ForegroundColor Yellow
          }

          # 🔧 إيقاف آمن مع فحص الحالة
          Write-Host "⏹️ إيقاف الخدمات..." -ForegroundColor Cyan
          
          # فحص وإيقاف App Pool
          $appPool = Get-WebAppPoolState -Name $appPoolName
          if ($appPool.Value -eq "Started") {
              Stop-WebAppPool $appPoolName
              Write-Host "✅ تم إيقاف App Pool: $appPoolName" -ForegroundColor Green
          } else {
              Write-Host "ℹ️ App Pool مُطفأ بالفعل: $appPoolName" -ForegroundColor Gray
          }

          # فحص وإيقاف الموقع
          $siteState = Get-WebsiteState -Name $siteName
          if ($siteState.Value -eq "Started") {
              Stop-Website $siteName
              Write-Host "✅ تم إيقاف الموقع: $siteName" -ForegroundColor Green
          } else {
              Write-Host "ℹ️ الموقع مُطفأ بالفعل: $siteName" -ForegroundColor Gray
          }

          Start-Sleep -Seconds 3

          # 📁 نسخ الملفات باستخدام Robocopy
          Write-Host "📤 نسخ الملفات..." -ForegroundColor Cyan
          $robocopyResult = robocopy .\publish $physicalPath /MIR /NFL /NDL /NJH /NJS /nc /ns /np
          if ($LASTEXITCODE -le 3) {
              Write-Host "✅ تم نسخ الملفات بنجاح" -ForegroundColor Green
          } else {
              Write-Host "❌ خطأ في نسخ الملفات: $LASTEXITCODE" -ForegroundColor Red
              exit 1
          }

          # ▶️ إعادة تشغيل آمن
          Write-Host "▶️ إعادة تشغيل الخدمات..." -ForegroundColor Cyan
          
          Start-WebAppPool $appPoolName
          Write-Host "✅ تم تشغيل App Pool: $appPoolName" -ForegroundColor Green
          
          Start-Website $siteName
          Write-Host "✅ تم تشغيل الموقع: $siteName" -ForegroundColor Green

          Write-Host "🎉 اكتمل النشر بنجاح! الموقع متاح على: http://localhost:8080" -ForegroundColor Green
